@model GreenSync.Lib.Models.Report
@{
    ViewData["Title"] = "Report Details";
}

<div class="container-fluid">
    <!-- Header Section -->
    <div class="row mb-4">
        <div class="col-12">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="@Url.Action("Index", "Home")">Dashboard</a></li>
                    <li class="breadcrumb-item"><a href="@Url.Action("Index", "Reports")">My Reports</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Report Details</li>
                </ol>
            </nav>
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h2 class="text-success fw-bold mb-0">
                        <i class="bi bi-file-earmark-text"></i> Report Details
                    </h2>
                    <p class="text-muted">@Model.Location</p>
                </div>
                <div>
                    @if (Model.Status == GreenSync.Lib.Models.ReportStatus.Reported)
                    {
                        <a href="@Url.Action("Edit", new { id = Model.Id })" class="btn btn-warning">
                            <i class="bi bi-pencil"></i> Edit Report
                        </a>
                    }
                    <a href="@Url.Action("Index", "Reports")" class="btn btn-outline-secondary">
                        <i class="bi bi-arrow-left"></i> Back to List
                    </a>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- Main Information Card -->
        <div class="col-lg-8 mb-4">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="bi bi-info-circle"></i> Report Information
                    </h5>
                </div>
                <div class="card-body">
                    <!-- Status Banner -->
                    <div class="alert @(Model.Status == GreenSync.Lib.Models.ReportStatus.Collected ? "alert-success" : 
                                        Model.Status == GreenSync.Lib.Models.ReportStatus.InProgress ? "alert-primary" : 
                                        Model.Status == GreenSync.Lib.Models.ReportStatus.Assigned ? "alert-info" :
                                        Model.Status == GreenSync.Lib.Models.ReportStatus.Cancelled ? "alert-secondary" : "alert-warning")" role="alert">
                        <div class="d-flex align-items-center">
                            <i class="bi @(Model.Status == GreenSync.Lib.Models.ReportStatus.Collected ? "bi-check-circle" : 
                                           Model.Status == GreenSync.Lib.Models.ReportStatus.InProgress ? "bi-arrow-repeat" : 
                                           Model.Status == GreenSync.Lib.Models.ReportStatus.Assigned ? "bi-truck" :
                                           Model.Status == GreenSync.Lib.Models.ReportStatus.Cancelled ? "bi-x-circle" : "bi-clock") fs-4 me-3"></i>
                            <div>
                                <strong>Status: @Model.Status</strong>
                                <p class="mb-0 mt-1">
                                    @switch (Model.Status)
                                    {
                                        case GreenSync.Lib.Models.ReportStatus.Reported:
                                            <span>Your report has been received and is awaiting assignment to a collection truck.</span>
                                            break;
                                        case GreenSync.Lib.Models.ReportStatus.Assigned:
                                            <span>A collection truck has been assigned and will arrive soon.</span>
                                            break;
                                        case GreenSync.Lib.Models.ReportStatus.InProgress:
                                            <span>The collection is currently in progress.</span>
                                            break;
                                        case GreenSync.Lib.Models.ReportStatus.Collected:
                                            <span>Waste has been successfully collected. Thank you for your contribution!</span>
                                            break;
                                        case GreenSync.Lib.Models.ReportStatus.Cancelled:
                                            <span>This report has been cancelled.</span>
                                            break;
                                    }
                                </p>
                            </div>
                        </div>
                    </div>

                    <!-- Location Information -->
                    <div class="row mb-4">
                        <div class="col-12">
                            <h6 class="text-success fw-bold mb-3">
                                <i class="bi bi-geo-alt"></i> Location Details
                            </h6>
                        </div>
                        <div class="col-md-12 mb-3">
                            <label class="text-muted small">Location</label>
                            <p class="fw-bold mb-0">@Model.Location</p>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="text-muted small">Latitude</label>
                            <p class="mb-0">@Model.Latitude.ToString("F6")</p>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="text-muted small">Longitude</label>
                            <p class="mb-0">@Model.Longitude.ToString("F6")</p>
                        </div>
                    </div>

                    <hr/>

                    <!-- Report Details -->
                    <div class="row mb-4">
                        <div class="col-12">
                            <h6 class="text-success fw-bold mb-3">
                                <i class="bi bi-file-text"></i> Report Details
                            </h6>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="text-muted small">Waste Type</label>
                            <p class="mb-0">
                                <span class="badge bg-light text-dark">
                                    <i class="bi bi-trash"></i> @Model.WasteType
                                </span>
                            </p>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="text-muted small">Priority</label>
                            <p class="mb-0">
                                @switch (Model.Priority)
                                {
                                    case GreenSync.Lib.Models.ReportPriority.Low:
                                        <span class="badge bg-secondary">Low</span>
                                        break;
                                    case GreenSync.Lib.Models.ReportPriority.Medium:
                                        <span class="badge bg-info">Medium</span>
                                        break;
                                    case GreenSync.Lib.Models.ReportPriority.High:
                                        <span class="badge bg-warning text-dark">High</span>
                                        break;
                                    case GreenSync.Lib.Models.ReportPriority.Critical:
                                        <span class="badge bg-danger">Critical</span>
                                        break;
                                }
                            </p>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="text-muted small">Estimated Volume</label>
                            <p class="mb-0">@Model.EstimatedVolume mÂ³</p>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="text-muted small">Report ID</label>
                            <p class="mb-0"><code>@Model.Id</code></p>
                        </div>
                        @if (!string.IsNullOrEmpty(Model.Description))
                        {
                            <div class="col-12 mb-3">
                                <label class="text-muted small">Description</label>
                                <p class="mb-0">@Model.Description</p>
                            </div>
                        }
                    </div>

                    @if (!string.IsNullOrEmpty(Model.ImageUrl))
                    {
                        <hr/>
                        <div class="row">
                            <div class="col-12">
                                <h6 class="text-success fw-bold mb-3">
                                    <i class="bi bi-image"></i> Photo Evidence
                                </h6>
                                <img src="@Model.ImageUrl" alt="Report Image" class="img-fluid rounded shadow-sm" style="max-height: 400px;"/>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Sidebar Information -->
        <div class="col-lg-4">
            <!-- Timeline Card -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="bi bi-clock-history"></i> Timeline
                    </h5>
                </div>
                <div class="card-body">
                    <div class="timeline">
                        <div class="timeline-item">
                            <div class="timeline-marker bg-success"></div>
                            <div class="timeline-content">
                                <small class="text-muted">Reported</small>
                                <p class="mb-0 fw-bold">@Model.Timestamp.ToString("MMM dd, yyyy")</p>
                                <small class="text-muted">@Model.Timestamp.ToString("hh:mm tt")</small>
                            </div>
                        </div>
                        @if (Model.Status >= GreenSync.Lib.Models.ReportStatus.Assigned && !string.IsNullOrEmpty(Model.AssignedTruckId))
                        {
                            <div class="timeline-item">
                                <div class="timeline-marker bg-info"></div>
                                <div class="timeline-content">
                                    <small class="text-muted">Assigned</small>
                                    <p class="mb-0 fw-bold">Truck ID: @Model.AssignedTruckId</p>
                                </div>
                            </div>
                        }
                        @if (Model.CollectedAt.HasValue)
                        {
                            <div class="timeline-item">
                                <div class="timeline-marker bg-success"></div>
                                <div class="timeline-content">
                                    <small class="text-muted">Collected</small>
                                    <p class="mb-0 fw-bold">@Model.CollectedAt.Value.ToString("MMM dd, yyyy")</p>
                                    <small class="text-muted">@Model.CollectedAt.Value.ToString("hh:mm tt")</small>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <!-- Map Preview Card -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="bi bi-map"></i> Location Map
                    </h5>
                </div>
                <div class="card-body p-0">
                    <div id="reportMap" style="height: 300px;"></div>
                </div>
                <div class="card-footer">
                    <a href="https://www.google.com/maps?q=@Model.Latitude,@Model.Longitude" target="_blank" class="btn btn-sm btn-outline-success w-100">
                        <i class="bi bi-box-arrow-up-right"></i> Open in Google Maps
                    </a>
                </div>
            </div>

            <!-- Actions Card -->
            @if (Model.Status == GreenSync.Lib.Models.ReportStatus.Reported)
            {
                <div class="card border-danger">
                    <div class="card-header bg-danger text-white">
                        <h5 class="card-title mb-0">
                            <i class="bi bi-exclamation-triangle"></i> Actions
                        </h5>
                    </div>
                    <div class="card-body">
                        <p class="text-muted small">You can edit or delete this report since it hasn't been assigned yet.</p>
                        <div class="d-grid gap-2">
                            <a href="@Url.Action("Edit", new { id = Model.Id })" class="btn btn-warning">
                                <i class="bi bi-pencil"></i> Edit Report
                            </a>
                            <button type="button" class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#deleteModal">
                                <i class="bi bi-trash"></i> Delete Report
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="deleteModalLabel">
                    <i class="bi bi-exclamation-triangle"></i> Confirm Delete
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this report?</p>
                <p class="text-muted">
                    <strong>Location:</strong> @Model.Location
                </p>
                <div class="alert alert-warning" role="alert">
                    <i class="bi bi-info-circle"></i> This action cannot be undone.
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="bi bi-x-circle"></i> Cancel
                </button>
                <form asp-action="Delete" asp-route-id="@Model.Id" method="post" style="display: inline;">
                    @Html.AntiForgeryToken()
                    <button type="submit" class="btn btn-danger">
                        <i class="bi bi-trash"></i> Delete Report
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <!-- Azure Maps Web SDK CSS -->
    <link rel="stylesheet" href="https://atlas.microsoft.com/sdk/javascript/mapcontrol/3/atlas.min.css" type="text/css" />
    
    <style>
        .timeline {
            position: relative;
            padding-left: 30px;
        }
        
        .timeline-item {
            position: relative;
            padding-bottom: 20px;
        }
        
        .timeline-item:not(:last-child)::before {
            content: '';
            position: absolute;
            left: -21px;
            top: 15px;
            width: 2px;
            height: calc(100% - 10px);
            background-color: #dee2e6;
        }
        
        .timeline-marker {
            position: absolute;
            left: -26px;
            top: 5px;
            width: 12px;
            height: 12px;
            border-radius: 50%;
            border: 2px solid #fff;
        }
        
        .timeline-content {
            padding-left: 10px;
        }
    </style>
}

@section Scripts {
    <!-- Azure Maps Web SDK -->
    <script src="https://atlas.microsoft.com/sdk/javascript/mapcontrol/3/atlas.min.js"></script>
    
    <script>
        // Initialize Azure Maps for report location
        (function() {
            'use strict';

            const subscriptionKey = '@ViewBag.AzureMapsSubscriptionKey';
            const reportLocation = [@Model.Longitude, @Model.Latitude];
            const locationName = '@Model.Location';

            // Check if subscription key is available
            if (!subscriptionKey || subscriptionKey === '') {
                console.warn('Azure Maps subscription key not configured');
                document.getElementById('reportMap').innerHTML = `
                    <div class="d-flex align-items-center justify-content-center h-100 bg-light">
                        <div class="text-center p-3">
                            <i class="bi bi-geo-alt text-success" style="font-size: 3rem;"></i>
                            <p class="text-muted mt-2 mb-0">@Model.Latitude.ToString("F4"), @Model.Longitude.ToString("F4")</p>
                            <small class="text-muted">Map preview unavailable - Azure Maps not configured</small>
                        </div>
                    </div>
                `;
                return;
            }

            try {
                // Initialize the map
                const map = new atlas.Map('reportMap', {
                    center: reportLocation,
                    zoom: 15,
                    language: 'en-US',
                    authOptions: {
                        authType: 'subscriptionKey',
                        subscriptionKey: subscriptionKey
                    }
                });

                // Wait for map to be ready
                map.events.add('ready', function() {
                    // Add controls
                    map.controls.add(new atlas.control.ZoomControl(), {
                        position: 'top-right'
                    });

                    // Create data source for the marker
                    const dataSource = new atlas.source.DataSource();
                    map.sources.add(dataSource);

                    // Create a point feature for the report location
                    const point = new atlas.data.Feature(new atlas.data.Point(reportLocation), {
                        title: locationName,
                        description: 'Report Location'
                    });

                    dataSource.add(point);

                    // Create symbol layer for the marker
                    const symbolLayer = new atlas.layer.SymbolLayer(dataSource, null, {
                        iconOptions: {
                            image: 'marker-red',
                            anchor: 'bottom',
                            size: 0.8
                        }
                    });

                    map.layers.add(symbolLayer);

                    // Create popup
                    const popup = new atlas.Popup({
                        pixelOffset: [0, -18],
                        closeButton: false
                    });

                    // Show popup on marker click
                    map.events.add('click', symbolLayer, function(e) {
                        if (e.shapes && e.shapes.length > 0) {
                            const properties = e.shapes[0].getProperties();
                            popup.setOptions({
                                content: `
                                    <div style="padding: 10px;">
                                        <strong>${properties.title}</strong><br/>
                                        <small class="text-muted">${properties.description}</small>
                                    </div>
                                `,
                                position: e.shapes[0].getCoordinates()
                            });
                            popup.open(map);
                        }
                    });

                    // Change cursor on hover
                    map.events.add('mousemove', symbolLayer, function() {
                        map.getCanvasContainer().style.cursor = 'pointer';
                    });

                    map.events.add('mouseout', symbolLayer, function() {
                        map.getCanvasContainer().style.cursor = 'grab';
                    });
                });

                // Handle map errors
                map.events.add('error', function(error) {
                    console.error('Map error:', error);
                    document.getElementById('reportMap').innerHTML = `
                        <div class="d-flex align-items-center justify-content-center h-100 bg-light">
                            <div class="text-center p-3">
                                <i class="bi bi-exclamation-triangle text-warning" style="font-size: 2rem;"></i>
                                <p class="text-muted mt-2 mb-0 small">Error loading map</p>
                            </div>
                        </div>
                    `;
                });

            } catch (error) {
                console.error('Error initializing map:', error);
                document.getElementById('reportMap').innerHTML = `
                    <div class="d-flex align-items-center justify-content-center h-100 bg-light">
                        <div class="text-center p-3">
                            <i class="bi bi-geo-alt text-success" style="font-size: 3rem;"></i>
                            <p class="text-muted mt-2 mb-0">@Model.Latitude.ToString("F4"), @Model.Longitude.ToString("F4")</p>
                        </div>
                    </div>
                `;
            }
        })();
    </script>
}
