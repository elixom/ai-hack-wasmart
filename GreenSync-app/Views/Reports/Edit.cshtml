@model GreenSync.Lib.Models.Report
@{
    ViewData["Title"] = "Edit Report";
}

<div class="container">
    <div class="row justify-content-center">
        <div class="col-lg-8">
            <!-- Header Section -->
            <div class="mb-4">
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item"><a href="@Url.Action("Index", "Home")">Dashboard</a></li>
                        <li class="breadcrumb-item"><a href="@Url.Action("Index", "Reports")">My Reports</a></li>
                        <li class="breadcrumb-item"><a href="@Url.Action("Details", new { id = Model.Id })">Report Details</a></li>
                        <li class="breadcrumb-item active" aria-current="page">Edit</li>
                    </ol>
                </nav>
                <h2 class="text-success fw-bold">
                    <i class="bi bi-pencil-square"></i> Edit Report
                </h2>
                <p class="text-muted">Update your waste report details</p>
            </div>

            <!-- Alert if report cannot be edited -->
            @if (Model.Status != GreenSync.Lib.Models.ReportStatus.Reported)
            {
                <div class="alert alert-warning" role="alert">
                    <i class="bi bi-exclamation-triangle"></i>
                    <strong>Warning:</strong> This report has already been @Model.Status.ToString().ToLower() and cannot be edited.
                    <div class="mt-2">
                        <a href="@Url.Action("Details", new { id = Model.Id })" class="btn btn-sm btn-warning">
                            View Report Details
                        </a>
                    </div>
                </div>
            }
            else
            {
                <!-- Edit Form Card -->
                <div class="card shadow-sm">
                    <div class="card-header bg-success text-white">
                        <h5 class="card-title mb-0">
                            <i class="bi bi-file-earmark-text"></i> Report Information
                        </h5>
                    </div>
                    <div class="card-body">
                        <form asp-action="Edit" method="post">
                            @Html.AntiForgeryToken()
                            <input type="hidden" asp-for="Id" />
                            <input type="hidden" asp-for="UserId" />
                            <input type="hidden" asp-for="Status" />
                            <input type="hidden" asp-for="Timestamp" />

                            <!-- Location Information -->
                            <div class="mb-4">
                                <h6 class="text-success fw-bold mb-3">
                                    <i class="bi bi-geo-alt"></i> Location Information
                                </h6>
                                
                                <!-- Location Input with Buttons -->
                                <div class="mb-3">
                                    <label asp-for="Location" class="form-label">Location (Optional)</label>
                                    <div class="input-group mb-2">
                                        <span class="input-group-text"><i class="bi bi-geo-alt"></i></span>
                                        <input asp-for="Location" class="form-control" placeholder="Enter street address or location name" id="locationInput">
                                        <button type="button" class="btn btn-outline-success" id="searchAddressBtn" title="Search for this address">
                                            <i class="bi bi-search"></i> Search
                                        </button>
                                        <button type="button" class="btn btn-outline-primary" id="useLocationBtn" title="Use my current location">
                                            <i class="bi bi-crosshair"></i> Use My Location
                                        </button>
                                    </div>
                                    <span asp-validation-for="Location" class="text-danger small"></span>
                                    <div class="form-text">
                                        <i class="bi bi-info-circle"></i> Enter an address or click "Use My Location" to automatically detect your position
                                    </div>
                                </div>

                                <!-- Hidden Coordinate Fields -->
                                <input asp-for="Latitude" type="hidden" id="Latitude">
                                <input asp-for="Longitude" type="hidden" id="Longitude">
                                
                                <!-- Coordinates Display -->
                                <div id="coordsDisplay" class="mb-3" style="display: none;">
                                    <small class="text-muted">
                                        <i class="bi bi-pin-map"></i> 
                                        Coordinates: <span id="coordsText"></span>
                                        <button type="button" class="btn btn-sm btn-link" onclick="toggleManualCoords()">
                                            Edit manually
                                        </button>
                                    </small>
                                </div>

                                <!-- Manual Coordinate Entry (Hidden by default) -->
                                <div id="manualCoordsSection" class="row mb-3" style="display: none;">
                                    <div class="col-md-6 mb-2">
                                        <label class="form-label small">Latitude</label>
                                        <input type="number" step="any" class="form-control form-control-sm" id="manualLat" placeholder="e.g., 4.6097">
                                    </div>
                                    <div class="col-md-6 mb-2">
                                        <label class="form-label small">Longitude</label>
                                        <input type="number" step="any" class="form-control form-control-sm" id="manualLng" placeholder="e.g., -74.0817">
                                    </div>
                                    <div class="col-12">
                                        <button type="button" class="btn btn-sm btn-success" onclick="applyManualCoords()">
                                            <i class="bi bi-check"></i> Apply Coordinates
                                        </button>
                                        <button type="button" class="btn btn-sm btn-secondary" onclick="toggleManualCoords()">
                                            Cancel
                                        </button>
                                    </div>
                                </div>
                            </div>

                            <hr/>

                            <!-- Waste Details -->
                            <div class="mb-4">
                                <h6 class="text-success fw-bold mb-3">
                                    <i class="bi bi-trash"></i> Waste Details
                                </h6>
                                <div class="row">
                                    <div class="col-md-6 mb-3">
                                        <label asp-for="WasteType" class="form-label">Waste Type <span class="text-danger">*</span></label>
                                        <select asp-for="WasteType" class="form-select">
                                            <option value="">Select waste type...</option>
                                            <option value="@GreenSync.Lib.Models.WasteType.General">General Waste</option>
                                            <option value="@GreenSync.Lib.Models.WasteType.Recyclable">Recyclable</option>
                                            <option value="@GreenSync.Lib.Models.WasteType.Organic">Organic</option>
                                            <option value="@GreenSync.Lib.Models.WasteType.Hazardous">Hazardous</option>
                                            <option value="@GreenSync.Lib.Models.WasteType.Electronic">Electronic</option>
                                            <option value="@GreenSync.Lib.Models.WasteType.Bulky">Bulky Items</option>
                                        </select>
                                        <span asp-validation-for="WasteType" class="text-danger small"></span>
                                    </div>
                                    <div class="col-md-6 mb-3">
                                        <label asp-for="Priority" class="form-label">Priority <span class="text-danger">*</span></label>
                                        <select asp-for="Priority" class="form-select">
                                            <option value="@GreenSync.Lib.Models.ReportPriority.Low">Low</option>
                                            <option value="@GreenSync.Lib.Models.ReportPriority.Medium">Medium</option>
                                            <option value="@GreenSync.Lib.Models.ReportPriority.High">High</option>
                                            <option value="@GreenSync.Lib.Models.ReportPriority.Critical">Critical</option>
                                        </select>
                                        <span asp-validation-for="Priority" class="text-danger small"></span>
                                    </div>
                                    <div class="col-md-6 mb-3">
                                        <label asp-for="EstimatedVolume" class="form-label">Estimated Volume (mÂ³)</label>
                                        <input asp-for="EstimatedVolume" class="form-control" type="number" step="0.1" min="0" />
                                        <span asp-validation-for="EstimatedVolume" class="text-danger small"></span>
                                        <small class="text-muted">Approximate volume of waste in cubic meters</small>
                                    </div>
                                    <div class="col-12 mb-3">
                                        <label for="ImageFiles" class="form-label">Upload Additional Images (Optional)</label>
                                        <input type="file" 
                                               class="form-control" 
                                               id="ImageFiles" 
                                               name="ImageFiles" 
                                               accept="image/jpeg,image/png,image/gif,image/webp"
                                               multiple>
                                        <div class="form-text">
                                            <i class="bi bi-info-circle"></i> 
                                            Add more images (JPG, PNG, GIF, WebP - max 10MB each)
                                        </div>
                                        
                                        <!-- Image preview container -->
                                        <div id="imagePreviewContainer" class="mt-3 d-none">
                                            <label class="form-label small text-muted">New Images Preview:</label>
                                            <div id="imagePreviews" class="d-flex flex-wrap gap-2"></div>
                                        </div>
                                        
                                        @if (Model.Images != null && Model.Images.Any())
                                        {
                                            <div class="mt-3">
                                                <label class="form-label small text-muted">Current Images:</label>
                                                <div class="d-flex flex-wrap gap-2">
                                                    @foreach (var image in Model.Images)
                                                    {
                                                        <div class="position-relative" style="width: 100px; height: 100px;">
                                                            <img src="@Url.Content($"~/{image.FilePath.Replace("\\", "/")}")" 
                                                                 class="img-thumbnail" 
                                                                 style="width: 100%; height: 100%; object-fit: cover;" 
                                                                 alt="@image.FileName" />
                                                            <small class="d-block text-muted text-truncate" style="max-width: 100px;">
                                                                @image.FileName
                                                            </small>
                                                        </div>
                                                    }
                                                </div>
                                            </div>
                                        }
                                    </div>
                                    <div class="col-12 mb-3">
                                        <label asp-for="Description" class="form-label">Description</label>
                                        <textarea asp-for="Description" class="form-control" rows="4" 
                                                  placeholder="Provide additional details about the waste, accessibility, or special instructions..."></textarea>
                                        <span asp-validation-for="Description" class="text-danger small"></span>
                                    </div>
                                </div>
                            </div>

                            <!-- Form Actions -->
                            <div class="d-flex justify-content-between align-items-center mt-4 pt-3 border-top">
                                <a href="@Url.Action("Details", new { id = Model.Id })" class="btn btn-outline-secondary">
                                    <i class="bi bi-x-circle"></i> Cancel
                                </a>
                                <button type="submit" class="btn btn-success">
                                    <i class="bi bi-check-circle"></i> Save Changes
                                </button>
                            </div>
                        </form>
                    </div>
                </div>

                <!-- Help Text -->
                <div class="alert alert-info mt-3" role="alert">
                    <i class="bi bi-info-circle"></i>
                    <strong>Note:</strong> Once a report is assigned to a collection truck, it can no longer be edited or deleted.
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    
    <script>
        // Update coordinates display
        function updateCoordsDisplay(lat, lng) {
            if (lat && lng) {
                document.getElementById('coordsText').textContent = `${parseFloat(lat).toFixed(6)}, ${parseFloat(lng).toFixed(6)}`;
                document.getElementById('coordsDisplay').style.display = 'block';
            } else {
                document.getElementById('coordsDisplay').style.display = 'none';
            }
        }

        // Toggle manual coordinates section
        function toggleManualCoords() {
            const section = document.getElementById('manualCoordsSection');
            const currentLat = document.getElementById('Latitude').value;
            const currentLng = document.getElementById('Longitude').value;
            
            if (section.style.display === 'none') {
                section.style.display = 'block';
                document.getElementById('manualLat').value = currentLat;
                document.getElementById('manualLng').value = currentLng;
            } else {
                section.style.display = 'none';
            }
        }

        // Apply manual coordinates
        function applyManualCoords() {
            const lat = document.getElementById('manualLat').value;
            const lng = document.getElementById('manualLng').value;
            
            if (lat && lng) {
                document.getElementById('Latitude').value = lat;
                document.getElementById('Longitude').value = lng;
                updateCoordsDisplay(lat, lng);
                toggleManualCoords();
            } else {
                alert('Please enter both latitude and longitude');
            }
        }

        // Search address button
        document.getElementById('searchAddressBtn').addEventListener('click', function() {
            const btn = this;
            const originalHtml = btn.innerHTML;
            const address = document.getElementById('locationInput').value.trim();
            
            if (!address) {
                alert('Please enter an address to search');
                return;
            }

            // Show loading state
            btn.disabled = true;
            btn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status"></span> Searching...';

            // Use Nominatim geocoding API to find coordinates
            fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(address)}&limit=1`)
                .then(response => response.json())
                .then(data => {
                    if (data && data.length > 0) {
                        const result = data[0];
                        const lat = parseFloat(result.lat);
                        const lng = parseFloat(result.lon);
                        
                        // Set coordinates
                        document.getElementById('Latitude').value = lat;
                        document.getElementById('Longitude').value = lng;
                        
                        // Update location with the formatted address from geocoding
                        document.getElementById('Location').value = result.display_name;
                        
                        // Update display
                        updateCoordsDisplay(lat, lng);
                        
                        // Show success message
                        const successDiv = document.createElement('div');
                        successDiv.className = 'alert alert-success alert-dismissible fade show mt-2';
                        successDiv.innerHTML = `
                            <i class="bi bi-check-circle"></i> Address found! Coordinates: ${lat.toFixed(6)}, ${lng.toFixed(6)}
                            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                        `;
                        document.querySelector('.mb-4').appendChild(successDiv);
                        setTimeout(() => successDiv.remove(), 5000);
                    } else {
                        alert('Address not found. Please try a different address or use "Use My Location" instead.');
                    }
                })
                .catch(error => {
                    console.error('Geocoding error:', error);
                    alert('Unable to search for address. Please try again or use "Use My Location" instead.');
                })
                .finally(() => {
                    btn.disabled = false;
                    btn.innerHTML = originalHtml;
                });
        });

        // Allow Enter key to trigger search
        document.getElementById('locationInput').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                document.getElementById('searchAddressBtn').click();
            }
        });

        // Use current location button
        document.getElementById('useLocationBtn').addEventListener('click', function() {
            const btn = this;
            const originalHtml = btn.innerHTML;
            
            if (!navigator.geolocation) {
                alert('Geolocation is not supported by your browser');
                return;
            }

            // Show loading state
            btn.disabled = true;
            btn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status"></span> Getting location...';

            navigator.geolocation.getCurrentPosition(
                function(position) {
                    const lat = position.coords.latitude;
                    const lng = position.coords.longitude;
                    
                    // Set coordinates
                    document.getElementById('Latitude').value = lat;
                    document.getElementById('Longitude').value = lng;
                    updateCoordsDisplay(lat, lng);
                    
                    // Try to get address using reverse geocoding
                    fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lng}`)
                        .then(response => response.json())
                        .then(data => {
                            if (data.display_name) {
                                document.getElementById('Location').value = data.display_name;
                            } else {
                                document.getElementById('Location').value = `Location at ${lat.toFixed(4)}, ${lng.toFixed(4)}`;
                            }
                        })
                        .catch(() => {
                            // Fallback if reverse geocoding fails
                            document.getElementById('Location').value = `Current Location (${lat.toFixed(4)}, ${lng.toFixed(4)})`;
                        })
                        .finally(() => {
                            btn.disabled = false;
                            btn.innerHTML = originalHtml;
                        });
                },
                function(error) {
                    let errorMsg = 'Unable to get your location. ';
                    switch(error.code) {
                        case error.PERMISSION_DENIED:
                            errorMsg += 'Please allow location access in your browser settings.';
                            break;
                        case error.POSITION_UNAVAILABLE:
                            errorMsg += 'Location information unavailable.';
                            break;
                        case error.TIMEOUT:
                            errorMsg += 'Location request timed out.';
                            break;
                        default:
                            errorMsg += 'An unknown error occurred.';
                    }
                    alert(errorMsg);
                    btn.disabled = false;
                    btn.innerHTML = originalHtml;
                },
                {
                    enableHighAccuracy: true,
                    timeout: 10000,
                    maximumAge: 0
                }
            );
        });

        // Form validation - only require coordinates
        document.querySelector('form').addEventListener('submit', function(e) {
            const lat = document.getElementById('Latitude').value;
            const lng = document.getElementById('Longitude').value;
            
            if (!lat || !lng || lat === '0' || lng === '0') {
                e.preventDefault();
                alert('Please provide coordinates by using "Use My Location", searching for an address, or entering them manually.');
                return;
            }
            
            // Auto-generate location description if not provided
            const location = document.getElementById('Location').value;
            if (!location.trim()) {
                document.getElementById('Location').value = `Location at ${parseFloat(lat).toFixed(4)}, ${parseFloat(lng).toFixed(4)}`;
            }
        });

        // Initialize coordinates display on page load
        window.addEventListener('load', function() {
            const lat = document.getElementById('Latitude').value;
            const lng = document.getElementById('Longitude').value;
            if (lat && lng) {
                updateCoordsDisplay(lat, lng);
            }
        });

        // Image file preview functionality
        document.getElementById('ImageFiles').addEventListener('change', function(e) {
            const files = e.target.files;
            const previewContainer = document.getElementById('imagePreviewContainer');
            const previewsDiv = document.getElementById('imagePreviews');
            
            // Clear previous previews
            previewsDiv.innerHTML = '';
            
            if (files.length === 0) {
                previewContainer.classList.add('d-none');
                return;
            }
            
            previewContainer.classList.remove('d-none');
            
            // Create preview for each file
            Array.from(files).forEach((file, index) => {
                if (file.type.startsWith('image/')) {
                    const reader = new FileReader();
                    
                    reader.onload = function(e) {
                        const previewItem = document.createElement('div');
                        previewItem.className = 'position-relative';
                        previewItem.style.width = '100px';
                        previewItem.style.height = '100px';
                        
                        const img = document.createElement('img');
                        img.src = e.target.result;
                        img.className = 'img-thumbnail';
                        img.style.width = '100%';
                        img.style.height = '100%';
                        img.style.objectFit = 'cover';
                        img.alt = file.name;
                        
                        const caption = document.createElement('small');
                        caption.className = 'd-block text-muted text-truncate';
                        caption.style.maxWidth = '100px';
                        caption.textContent = file.name;
                        
                        previewItem.appendChild(img);
                        previewItem.appendChild(caption);
                        previewsDiv.appendChild(previewItem);
                    };
                    
                    reader.readAsDataURL(file);
                }
            });
        });
    </script>
}
